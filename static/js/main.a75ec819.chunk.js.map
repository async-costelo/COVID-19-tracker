{"version":3,"sources":["components/header/header.js","components/map/map.js","App.js","serviceWorker.js","index.js"],"names":["GridHeader","latest","confirmed","deaths","recovered","Grid","columns","divided","Row","Column","Image","src","size","verticalAlign","Statistic","color","inverted","Value","Label","calculateRadius","cases","multiplier","min","max","radius","LeafletMap","data","i","locations","console","log","id","Map","center","zoom","TileLayer","attribution","url","map","loc","Circle","coordinates","lat","long","Popup","province","country","App","useState","cData","setData","setLatest","isLoading","setLoading","useEffect","fetch","then","res","json","catch","err","className","Menu","pointing","secondary","Item","name","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a75ec819.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n  Grid, \r\n  Image, \r\n  Statistic \r\n} from 'semantic-ui-react';\r\n\r\nconst GridHeader = (latest) => {\r\n  const { confirmed, deaths, recovered } = latest.latest\r\n  return (\r\n    <Grid columns={3} divided>\r\n      <Grid.Row>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/434366/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='yellow' inverted>\r\n            <Statistic.Value>{confirmed}</Statistic.Value>\r\n            <Statistic.Label>Confirmed Cases</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/61496/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='green' inverted>\r\n            <Statistic.Value>{recovered}</Statistic.Value>\r\n            <Statistic.Label>Survived</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Image src=\"https://cdn.frankerfacez.com/emoticon/425799/4\" size=\"small\" verticalAlign='middle' />\r\n          <Statistic color='red' inverted>\r\n            <Statistic.Value>{deaths}</Statistic.Value>\r\n            <Statistic.Label>Deaths</Statistic.Label>\r\n          </Statistic>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GridHeader;","import React from \"react\";\r\nimport { Map, TileLayer, Circle, Popup } from \"react-leaflet\";\r\n\r\nconst calculateRadius = (cases, multiplier, min, max) => {\r\n  // Calculate radius.\r\n  const radius = cases * multiplier;\r\n\r\n  // Check for min and max.\r\n  if (radius < min) return min;\r\n  if (radius > max) return max;\r\n\r\n  // Return radius.\r\n  return radius;\r\n}\r\n\r\nconst LeafletMap = ({ data: { confirmed } }) => {\r\n  const position = [ 35.0000, 103.0000 ];\r\n\r\n  for (const i in confirmed.locations) {\r\n    console.log(confirmed.locations[i]);\r\n  }\r\n\r\n  return (\r\n    <div id=\"mapid\">\r\n      <Map center={position} zoom={4}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {confirmed.locations.map(loc => (\r\n          <Circle\r\n            center={[loc.coordinates.lat, loc.coordinates.long]}\r\n            radius={calculateRadius(loc.latest, 25, 15000, 500000)}\r\n            color=\"red\"\r\n          >\r\n            <Popup>\r\n              <div>\r\n                <h3>{`${loc.province ? loc.province : 'Province not specified'}, ${loc.country}`}</h3>\r\n                <p>{`Confirmed Cases: ${loc.latest}`}</p>\r\n              </div>\r\n            </Popup>\r\n          </Circle>\r\n        ))}\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeafletMap;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\n// components\r\nimport GridHeader from './components/header/header';\r\nimport Map from './components/map/map';\r\n\r\nconst App = () => {\r\n  const [cData, setData] = useState();\r\n  const [latest, setLatest] = useState();\r\n  const [isLoading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch('https://coronavirus-tracker-api.herokuapp.com/all')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data);\r\n        setLatest(data.latest)\r\n        setData(data);\r\n        setLoading(false);\r\n      }).catch(err => {\r\n        console.log(`Error fetching: ${err}`);\r\n      });\r\n  },[])\r\n\r\n  if (isLoading) {\r\n    return <div>loading</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Menu\r\n          pointing \r\n          secondary\r\n          inverted\r\n        >\r\n          <Menu.Item\r\n            name='editorials'\r\n          >\r\n            <a \r\n              href=\"https://github.com/galoncyryll/COVID-19-tracker\" \r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className=\"github-link\"\r\n            >\r\n              <i className=\"github icon\"></i>\r\n            </a>\r\n          </Menu.Item>\r\n        </Menu>\r\n        <GridHeader latest={latest}/>\r\n      </header>\r\n      <Map data={cData}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}